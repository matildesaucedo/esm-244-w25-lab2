---
title: "lab-2-template work through"
author: "Matilde Saucedo"
format: 
  html:
    code-folding: show
    embed-resources: true
execute:
  warning: false
  message: false
---

```{r}
# load libraries
library(tidyverse)
library(palmerpenguins)
```

What does the following code chunk do? Why do we want to do these steps?

```{r}

penguins_clean<-penguins |> 
  drop_na() |> 
  rename(mass=body_mass_g, #renamed this to have titles that are easier to work with and call as you work through it
         bill_l=bill_length_mm,
         bill_d=bill_depth_mm,
         flip_l=flipper_length_mm)
```

## Part 1: Set up models

We are tasked with providing a penguin growth model to support conservation efforts in Antartica. The lead researcher needs an accurate, but parsimonious model to predict penguin body mass based on observed characteristics. They asked us to analyze 3 models:

-   Model 1: Bill length, bill depth, flipper length, species, sex, and island

-   Model 2: Bill length, bill depth, flipper length, species, and sex

-   Model 3: Bill depth, flipper length, species, and sex

Run a linear model for each model specification. Summarize your findings. Use the `penguins_clean` dataframe.

**New Feature!**

R is able to recognize formulas if saved to the global environment. Take advantage of that using the following code chunk as inspiration:

```{r}
#| eval: false

#variable name
f1   <-  mass~bill_l+bill_d+flip_l+species+sex+island

mdl1<-lm(f1, data=penguins_clean)


#variable name
f2   <-  mass~bill_l+bill_d+flip_l+species+sex

mdl2<-lm(f2, data=penguins_clean)


#variable name
f3   <-  mass~bill_d+flip_l+species+sex

mdl3<-lm(f3, data=penguins_clean)


#summarize each of the models to see what the statistics values are

summary(mdl1)
summary(mdl2)
summary(mdl3)

```

```{r}
# Use this chunk and any extras to complete setting up the model



```

### AIC

Use AIC to justify your model selection. What edits do you need to make in order for the chunk below to work? Interpret the output. *Bonus:* Try to make the rendered output pretty by putting it into a table.

```{r}
#| eval: false

AIC(x,y,z)



```

```{r}

AIC(mdl1, mdl2, mdl3)

#you chooce the model with the lowest AIC
```

## Comparing models with Cross Validation

Now we're going to use 10-fold cross validation to help us select the models. Write out some pseudocode to outline the process we'll need to implement.

Pseudocode:

-   select how much training data (10 folds)

-   split data into test and training

-   do random sampling to carry out the split

-   What metric will the decision for best model be based on: root mean squared error (RMSE)

    -   will make a function for RMSE

-   then you will set up a for loop

    -   apply the model to each training set

    -   make predictions on the test set with fitted training model

-   close loop

-   summarize our RMSE aka which model on average was the best

-   final model build on the entire data set

### Accuracy criteria

What metric is going to help us identify which model performed better?

[Here's an extensive list of options](https://www.geeksforgeeks.org/metrics-for-machine-learning-model/#) for metrics to use on what performs better

We'll use root mean square error to start as it is the most widely used.

What is the difference between these two functions? Create two example vectors `x` and `y` to test each. Make sure to run the functions before trying them out. Which do you prefer using?

```{r}

x <- seq(.5,100, by=.5)
  
y <- seq(1,2000, by=10)

# you can also do x <- rnorm(some number) and it will randomly pull values that are normally distributed to the amount of the number you tell it to
  
  
calc_rmse<-function(x,y){
  rmse <- (x-y)^2 |> 
    mean() |> 
    sqrt()
  return(rmse)
}

calc_rmse_2<-function(x,y){
  rmse<- sqrt(mean((x-y)^2))
  
  return(rmse)
}

calc_rmse(x,y)
calc_rmse_2(x,y)

#so now we have a function that helps us take in values and put out a prediction
```

### Testing and Training split

We need to randomly assign every data point to a fold. We're going to want 10 folds.

**New Function!**

`sample()` takes a random draw from a vector we pass into it. For example, we can tell sample to extract a random value from a vector of 1 through 5

```{r}
ex<-seq(1,5) #this is a sequence vector
sample(ex,size=1) #this sample function takes a random draw from the vector we put into it, it takes one random sample from the vector provided every time it runs

# we can create a random sample of any size with the size term.

# Why doesn't the first line work while the second does?
sample(ex,size=10)
sample(ex,size=10,replace=TRUE)

#Describe in words the replace argument.


```

Why is everybody getting different answers in the example sample? Is this a problem for reproducible datascience and will it affect our results (Like would Nathan have different model results than Yutian?)

```{r}

#everyone will get slightly different answers using randomized variables that are different in the training set

#seed
set.seed(42) #this tells the computer that any time a random number is generated, it uses the same pathway because in reality all numbers are just random from a new starting point of frequencies and vectors within a computer
sample(ex, size=10, replace=TRUE)


```

Now let's use sample in tidyverse structure to group the data into different folds.

```{r}
folds<-10

fold_vec<-rep(1:folds,length.out=nrow(penguins_clean))

penguins_fold<-penguins_clean |> #what goes after this?
  mutate(group=sample(fold_vec, size=n(),replace=FALSE))
  

#check to make sure the fold groups are balanced and each fold has about the same number of samples

table(penguins_fold$group)
```

Create dataframes called `test_df` and `train_df` that split the penguins data into a train or test sample

```{r}
# datasets here

test_df <- penguins_fold |>
  filter(group==1)

train_df <- penguins_fold |>
  filter(group!=1)

```

Now fit each model to the training set using the `lm()`. Name each model `training_lmX` where X is the number of the formula.

```{r}

training_lm1 <- lm(f1, data=train_df)

training_lm2 <- lm(f2, data=train_df)

training_lm3 <- lm(f3, data=train_df)


```

**New Function!**

`predict()` uses R models to run predictions with new data. In our case the structure would look something like what we see below. What do I need to do to make this chunk work?

```{r}
predict_test<-test_df |> 
  mutate(model1 = predict(training_lm1,test_df),
         model2 = predict(training_lm2,test_df),
         model3 = predict(training_lm3,test_df))

#this will return predicted mass for each row of data that contains the attributes we are correlating to mass
```

Calculate the RMSE of the first fold test predictions. Hint: Use summarize to condense the `predict_test` dataframe.

```{r}
rmse_predict_test<-predict_test |> 
  summarize(rmse_modl1=calc_rmse(mass,model1),
            rmse_modl2=calc_rmse(mass,model2),
            rmse_modl3=calc_rmse(mass,model3)) #you summarize the value by group bc the point of this is to compare the actual mass vs the predicted mass from

```

What are the results just looking at the first fold?

### 10-fold CV: For Loop

Our general structure works with one fold. Now we need to evaluate across all 10 folds for each model. Let's use a for loop to iterate over the folds for just one model first.

```{r}

### initialize a blank vector
rmse_vec<-vector(mode='numeric', length=folds)  #Why? this is what is going to store the results, it's the storage vector, you want it to be numeric

for( i in 1:folds){

  # separate into test and train
  kfold_test_df <-penguins_fold %>% 
    filter(group==i) #this is what we did above where we separated out a group we wanted
  
  kfold_train_df <- penguins_fold %>% 
    filter(group!=i)
  
  # Run for one model
  training_kfold <- lm(f1, data=kfold_train_df)
  
  
  #Get the predictions from the model
  predict_test1<-kfold_test_df |> 
  mutate(model1 = predict(training_kfold,kfold_test_df))
  
  
  # Summarize/calculate the rmse for that model
  kfold_rmse<-predict_test1 |> 
  summarize(rmse_modl1=calc_rmse(mass,model1))
  
  rmse_vec[i]<-kfold_rmse$rmse_modl1 #this is how we store the output into the vector we created
}

# Average value for the first model
mean(rmse_vec)
```

Great we made a for loop for one model. Now we would have to do it again and again for the other formulas. To reduce copy/pasting let's make the innerpart of the for loop into a function. I gave you the starting pieces below. Complete the rest of the function

```{r}
kfold_cv<-function(i,df,formula){
  
  #split into train and test
  
  kfold_train_df <- df %>% 
    filter(group!=i)
  
  kfold_test_df <- df %>% 
    filter(group==i)
  
  #run model
  kfold_lm <- lm(formula, data=kfold_train_df)
  
  #get prediction
  kfold_pred_df <- kfold_test_df %>% 
    mutate(md=predict(kfold_lm,kfold_test_df))
  
  #calculate rmse
  kfold_rmse <- kfold_pred_df %>% 
    summarize(rmse_md=calc_rmse(md,mass))
  
  return(kfold_rmse$rmse_md)
              
  
}
```

### 10-fold CV: Purrr

Since we already defined the function that does CV for each model. We can use purrr to easily get all the results and store it in a dataframe.

```{r}
rmse_df<-data.frame(j=1:folds) |> mutate(rmse_mdl1 = map_dbl(j, kfold_cv, df=penguins_fold,formula=f1),
                                         rmse_mdl2=map_dbl(j,kfold_cv,df=penguins_fold,formula=f2),
                                         rmse_mdl3=map_dbl(j,kfold_cv,df=penguins_fold,formula=f3))

rmse_means<-rmse_df |> 
  summarize(across(starts_with('rmse'),mean))

```

## Final Model Selection

Between AIC and the RMSE scores of the Cross Validation, which model does the best job of predicting penguin bodymass?

-   Both AIC and RMSE show model 2 is the best

The final step is to run the selected model on all the data. Fit a final model and provide the summary table.

```{r}


model2_run <- lm(f2, data=penguins_clean)

summary(model2_run)


```

Render your document, commit changes, and push to github.
